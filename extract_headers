#!/bin/bash

# foreground colors
FG_BLACK="\033[30m"
FG_RED="\033[31m"
FG_GREEN="\033[32m"
FG_YELLOW="\033[33m"
FG_BLUE="\033[34m"
FG_MAGENTA="\033[35m"
FG_CYAN="\033[36m"
FG_WHITE="\033[37m"

# background colors
BG_BLACK="\033[40m"
BG_RED="\033[41m"
BG_GREEN="\033[42m"
BG_YELLOW="\033[43m"
BG_BLUE="\033[44m"
BG_MAGENTA="\033[45m"
BG_CYAN="\033[46m"
BG_WHITE="\033[47m"

# formats
NORMAL="\033[0m"
BOLD="\033[1m"
DIM="\033[2m"
ITALIC="\033[3m"
UNDERLINE="\033[4m"
BLINKING="\033[5m"
INVERSE="\033[7m"
HIDDEN="\033[8m"
STRIKE="\033[9m"

FLAG_STDINT=(
	"int8_t"
	"int16_t"
	"int32_t"
	"int64_t"
	"uint8_t"
	"uint16_t"
	"uint32_t"
	"uint64_t"
	"int_least8_t"
	"int_least16_t"
	"int_least32_t"
	"int_least64_t"
	"uint_least8_t"
	"uint_least16_t"
	"uint_least32_t"
	"uint_least64_t"
	"int_fast_8t"
	"int_fast_16t"
	"int_fast_32t"
	"int_fast_64t"
	"uint_fast_8t"
	"uint_fast_16t"
	"uint_fast_32t"
	"uint_fast_64t"
	"intptr_t"
	"intmax_t"
	"uintptr_t"
	"uintmax_t"
)

# banner, to be formatted to match 42 norm
# '_' marks where insertion will take place
BANNER=(
	"/* ************************************************************************** */" # 0
	"/*                                                                            */" # 1
	"/*                                                        :::      ::::::::   */" # 2
	"/*   _                                                  :+:      :+:    :+:   */" # 3
	"/*                                                    +:+ +:+         +:+     */" # 4
	"/*   By: _                                          +#+  +:+       +#+        */" # 5
	"/*                                                +#+#+#+#+#+   +#+           */" # 6
	"/*   Created: _                                        #+#    #+#             */" # 7
	"/*   Updated: _                                       ###   ########.fr       */" # 8
	"/*                                                                            */" # 9
	"/* ************************************************************************** */" # 10
)

HELP="\
Extract_headers is a program designed to facilitate header file generation         \n\
for 42 school projects.                                                            \n\
                                                                                   \n\
It detects c files at the specified path and extracts all function prototypes      \n\
into a new header file, automatically imporing the necessary stdlib and            \n\
structure headers. Please note that generated header files will be overwritten     \n\
each time extract_headers is called.                                               \n\
                                                                                   \n\
Structures can only be detected if they follow the naming convention \"t_s_name\". \n\
These will be automatically included in the header \"s_name.h\". So for example    \n\
if your function prototypes use \"t_s_deque\" then \"s_deque.h\" will automatically\n\
be imported. Please note that you still have to create this file, this is only     \n\
done so as to simplify structure inclusion, not automate it.                       \n\
                                                                                   \n\
  Usage:                                                                           \n\
    extract_headers -h/--help     displays help info for extract_headers           \n\
    extract_headers -d/--dir      specifies where to look for c files              \n\
    extract_headers -v/--verbose  toggles extra output                             \n\
                                                                                   \n\
  Supported headers:                                                               \n\
    <stddef.h>                    size_t                                           \n\
    <stdbool.h>                   bool                                             \n\
    <stdarg.h>                    va_list                                          \n\
                                                                                   \n\
  Author: Eliot McNab, based on the code of JB Caron                               \n"

# matches function prototypes in a file
REGEX_PROTOTYPE='[a-zA-Z0-9_]+	\**[a-z][a-z0-9_]+\(([a-zA-Z0-9_*]* [a-zA-Z0-9_,*\(\)]*)*.{3}?\)$'
# matches function names in a prototype
REGEX_FUNCTION='[a-zA-Z0-9_]*\('
# matches structure types in prototype
REGEX_STRUCT='t_s_[a-zA-Z0-1_]*'

#######################################
# Determines wether a function prototype
# requires stddef
# Arguments:
# 	Function to check, a string
# Returns:
# 	1 if function requires stddef, 0 otherzise
#######################################
should_include_stddef()
{
	local prototype=$1
	if [[ $prototype == *"size_t"* ]]; then
		return 1
	else
		return 0
	fi
}

#######################################
# Determines wether a function prototype
# requires stdbool
# Arguments:
# 	Function to check, a string
# Returns:
# 	1 if function requires stdbool, 0 otherzise
#######################################
should_include_stdbool()
{
	local prototype=$1
	if [[ $prototype == *"bool"* ]]; then
		return 1
	else
		return 0
	fi
}

#######################################
# Determines wether a function prototype
# requires stdarg
# Arguments:
# 	Function to check, a string
# Returns:
# 	1 if function requires stdarg, 0 otherzise
#######################################
should_include_stdarg()
{
	local prototype=$1
	if [[ $prototype == *"va_list"* ]]; then
		return 1
	else
		return 0
	fi
}

#######################################
# Determines wether a function prototype
# requires stdint
# Arguments:
# 	Function to check, a string
# Returns:
# 	1 if function requires stdint, 0 otherzise
#######################################
should_include_stdint()
{
	local prototype=$1
	for typedef in ${FLAG_STDINT[@]}; do
		if [[ $prototype == *"$typedef"* ]]; then
			return 1
		fi
	done
	return 0
}

#######################################
# Parses script arguments
# Globals:
# 	map_opts
# Arguments:
# 	Arguments passed to the script
#######################################
parse_arguments()
{
	# retrieves arguments
	local args=("$@")
	declare -gA map_opts

	# iterates over each argument to retrieve its value
	for ((i=0; i < ${#args[@]}; i++)); do
		case "${args[$i]}" in
			--file|-f)			# specifies file
				# --file is incompatible with --dir
				if [[ -v map_opts["dir"] ]]; then
					echo "Error: --file cannot be used in combination with --dir flag"
					exit 1
				fi
				map_opts["file"]=${args[$((i + 1))]}
				# moves on to the next argument
				i=$((i + 1))
				shift 2
				;;
			--dir|-d)			# specifies source directory
				# --dir is incompatible with --file
				if [[ -v map_opts["file"] ]]; then
					echo "Error: --fir cannot be used in combination with --file flag"
					exit 1
				fi
				map_opts["dir"]=${args[$((i + 1))]}
				# moves on to the next argument
				i=$((i + 1))
				shift 2
				;;
			--verbose|-v)		# activates verbose output
				map_opts["verbose"]=1
				shift
				;;
			--help|-h)			# displays help
				# help must be the only option if used
				if [[ ${#map_opts[@]} -gt 1 ]]; then
					echo "Error: --help cannot be used with any other parameter"
					exit 1;
				fi
				map_opts["help"]=1
				shift
				;;
		esac
	done

	# sets default values for options
	if [[ ! -v map_opts["dir"] ]]; then
		map_opts["dir"]="."
	fi

	IFS=$'\n'
}

#######################################
# Generates file with 42 header
# Arguments:
# 	File to write to, a path
# 	Verbose mode, a number
#######################################
generate_banner()
{
	local file=$1
	local verbose=$2

	# logs info message if in verbose mode
	if [[ $verbose ]]; then
		echo -e "$BOLD$FG_MAGENTA[ $file ]$NORMAL"
	fi

	# retrieves the parts of the banner to update
	local line_file=${BANNER[3]}
	local line_author=${BANNER[5]}
	local line_date_created=${BANNER[7]}
	local line_date_updated=${BANNER[8]}

	# variables used for replacement
	local indent=5
	local date=$(date +"%Y/%m/%d %T")
	local userdate="$date by $user"
	local line_start
	local line_end

	# replaces file name
	line_start=${line_file:0:indent}
	line_end=${line_file:$(($indent + ${#file}))}
	local line_file="$line_start$file$line_end"

	# logs info message if in verbose mode
	if [[ $verbose ]]; then
		echo -e "$FG_GREEN Successfully$NORMAL inserted$BOLD$FG_WHITE file name$NORMAL"
	fi

	# replaces file author
	line_start=${line_author:0:indent}
	line_end=${line_author:$(($indent + 7 + ${#user} + ${#mail}))}
	local line_author="${line_start}By: $user <$mail>$line_end"

	# logs info message if in verbose mode
	if [[ -v map_opts["verbose"] ]]; then
		echo -e "$FG_GREEN Successfully$NORMAL inserted$BOLD$FG_WHITE file author$NORMAL"
	fi

	# replaces file creation date
	line_start=${line_date_created:0:indent}
	line_end=${line_date_created:$(($indent + 9 + ${#userdate}))}
	local line_date_created="${line_start}Created: $userdate${line_end}"

	# logs info message if in verbose mode
	if [[ -v map_opts["verbose"] ]]; then
		echo -e "$FG_GREEN Successfully$NORMAL inserted$BOLD$FG_WHITE file creation date$NORMAL"
	fi

	# replace file update time
	line_start=${line_date_updated:0:indent}
	line_end=${line_date_updated:$(($indent + 9 + ${#userdate}))}
	local line_date_updated="${line_start}Updated: $userdate${line_end}"

	# logs info message if in verbose mode
	if [[ -v map_opts["verbose"] ]]; then
		echo -e "$FG_GREEN Successfully$NORMAL inserted$BOLD$FG_WHITE file update date$NORMAL"
		echo -e "$BOLD$FG_GREEN >> Adding$NORMAL header to $BOLD$UNDERLINE$FG_WHITE$file$NORMAL"
	fi

	# adds the header to the file
	# NOTE: this will delete all file contents
	echo ${BANNER[0]}       > $file
	echo ${BANNER[1]}       >> $file
	echo ${BANNER[2]}       >> $file
	echo $line_file         >> $file
	echo ${BANNER[4]}       >> $file
	echo $line_author       >> $file
	echo ${BANNER[6]}       >> $file
	echo $line_date_created >> $file
	echo $line_date_updated >> $file
	echo ${BANNER[9]}       >> $file
	echo ${BANNER[10]}      >> $file
}

#######################################
# main function, handles header extraction
# for all specified files or all files in
# specified directory
# Arguments:
# 	Arguments passed to the script
#######################################
main()
{
	local files
	local name_base
	local name_prot
	local prototype
	local import_extra
	local tab_max

	declare -A map_include
	declare -A map_struct
	declare -a map_tab_start
	declare -a map_tab_end

	parse_arguments "$@"

	# displays help if --help is used
	if [[ -v map_opts["help"] ]]; then
		echo -e $HELP
		exit 0
	fi

	if [[ -v map_opts["file"] ]]; then		# uses the provided file path
		files=${map_opts["file"]}
	elif [[ -v map_opts["dir"] ]]; then		# looks for c files in the source directory
		files=$(find ${map_opts["dir"]} -name "*.c")
	fi

	# for every file...
	for file in ${files[@]}; do
		# displays file name if in verbose mode
		if [[ -v map_opts["verbose"] ]]; then
			echo -e "$BOLD$FG_WHITE$BG_GREEN[ $file ]$NORMAL"
		fi

		# keeps only the file base (without the extension)
		name_base=$(basename $file .c)
		# the name of the header file
		name_file="$name_base.h"
		# the define name used to protect from double inclusions
		name_prot=$(echo $name_file | tr '[:lower:]' '[:upper:]' | tr '.' '_')
		# retrieves all functon prototypes in the file
		prototype=($(grep -v 'static' $file | grep -oE $REGEX_PROTOTYPE))

		# if no prototype was found in the current file moves on to next file
		if [[ ! $prototype ]]; then
			continue
		fi

		# generates banner
		if [[ -v map_opts["verbose"] ]]; then
			echo -e "$ITALIC Generating banner$NORMAL"
			generate_banner $name_file 1
		else
			generate_banner $name_file
		fi

		# adds header protection
		echo ""                    >> $name_file
		echo "#ifndef $name_prot"  >> $name_file
		echo "# define $name_prot" >> $name_file
		echo ""                    >> $name_file

		# stores necessary includes
		import_extra=0

		# used to align function declerations
		tab_max=0

		# for every function prototype in the current file...
		for ((i=0; i < ${#prototype[@]}; i++)); do
			local function
			local struct
			local j

			# gets function prototype
			function=${prototype[i]}

			# ...if "stddef" should be included...
			if [[ ! -v map_include["stddef"] ]]; then
				# we only check for stddef if it hasn't been included already
				should_include_stddef $function
				if [[ $? == 1 ]]; then
					# includes stddef.h
					map_include["stddef"]=1
					import_extra=1
					echo "# include <stddef.h>" >> $name_file
					# logs info message if in verbose mode
					if [[ -v map_opts["verbose"] ]]; then
						echo -e "$BOLD$FG_BLUE >> Including$BOLD$FG_WHITE stddef.h$NORMAL"
					fi
				fi
			fi
			# ...if "stdbool" should be included...
			if [[ ! -v map_include["stdbool"] ]]; then
				# we only check for stdbool if it hasn't been included already
				should_include_stdbool $function
				if [[ $? == 1 ]]; then
					# includes stdbool.h
					map_include["stdbool"]=1
					import_extra=1
					echo "# include <stdbool.h>" >> $name_file
					# logs info message if in verbose mode
					if [[ -v map_opts["verbose"] ]]; then
						echo -e "$BOLD$FG_BLUE >> Including$BOLD$FG_WHITE stdbool.h$NORMAL"
					fi
				fi
			fi
			# ...if "stdarg" should be included...
			if [[ ! -v map_include["stdarg"] ]]; then
				# we only check for stdarg if it hasn.t been included already
				should_include_stdarg $function
				if [[ $? == 1 ]]; then
					# includes stdarg.h
					map_include["stdarg"]=1
					import_extra=1
					echo "# include <stdarg.h>" >> $name_file
					# logs info message if in verbose mode
					if [[ -v map_opts["verbose"] ]]; then
						echo -e "$BOLD$FG_BLUE >> Including$BOLD$FG_WHITE stdarg.h$NORMAL"
					fi
				fi
			fi
			# ...if "stdint" should be included...
			if [[ ! -v map_include["stdint"] ]]; then
				# we only check for stdint if it hasn't been included already
				should_include_stdint $function
				if [[ $? == 1 ]]; then
					# includes stdint.h
					map_include["stdint"]=1
					import_extra=1
					echo "# include <stdint.h>" >> $name_file
					# logs info message if in verbose mode
					if [[ -v map_opts["verbose"] ]]; then
						echo -e "$BOLD$FG_BLUE >> Including$BOLD$FG_WHITE stdint.h$NORMAL"
					fi
				fi
			fi
			# ...if a struct is found...
			struct=$(echo $function | grep -oE $REGEX_STRUCT | sed -s 's/t_//' | head -1)
			if [[ $struct && ! -v map_struct[$file:$struct] ]]; then
				# includes the header associated to that struct
				map_struct["$file:$struct"]=1
				import_extra=1
				echo "# include \"$struct.h\"" >> $name_file
				# logs info message if in verbose mode
				if [[ -v map_opts["verbose"] ]]; then
					echo -e "$BOLD$FG_BLUE >> Including$BOLD$FG_WHITE $struct.h$NORMAL"
				fi
			fi

			# gets function decleration tab index
			j=0
			while [[ ${function:j:1} != "	" ]]; do
				j=$((j + 1))
			done

			# stores tab start
			map_tab_start[$i]=$((j + 1))
			# stores tab end
			map_tab_end[$i]=$((j + 4 - (j % 4)))

			# updates tab_max if new maximum is found
			if [[ ${map_tab_end[i]} -gt tab_max ]]; then
				tab_max=${map_tab_end[i]}
			fi
		done

		# unsets all include maps
		for included in ${!map_include[@]}; do
			unset map_include[$included]
		done
		for included in ${!map_struct[@]}; do
			unset map_struct[$included]=0
		done

		# displays max tab index if verbose output is enabled
		if [[ -v map_opts["verbose"] ]]; then
			echo " max tab index: $tab_max"
		fi

		# if extra headers were imported...
		if [[ $import_extra == 1 ]]; then
			# ...adds a newline
			echo "" >> $name_file
		fi

		# for every prototype in the current file...
		for ((i=0; i < ${#prototype[@]}; i++)); do
			local function
			local name_fun
			local fun_return
			local fun_name
			local tab_count
			local tab_delta
			local norminette_output

			# gets function prototype
			function=${prototype[i]}

			# shortens function name for display if in verbose mode
			if [[ -v map_opts["verbose"] ]]; then
				name_fun=$(echo $function | grep -oE $REGEX_FUNCTION | sed -s 's/(//')
			fi

			# if function prototype need to be aligned (justified)
			if [[ ${map_tab_end[i]} -lt $tab_max ]]; then
				# splits the return section of the function prototype
				fun_return=${function:0:${map_tab_start[i]}}
				# splits the name section of the function prototype
				fun_name=${function:${map_tab_start[i]}}

				# determines the number of tabs needed to align the prototype
				tab_count=$(((tab_max - map_tab_end[i]) / 4))
				tab_delta=$(printf "	"%.0s {1..$tab_count})

				# aligns the function prototype
				function="$fun_return$tab_delta$fun_name"

				# logs info message if in verbose mode
				if [[ $name_fun ]]; then
					echo " >> Justifying $name_fun by $tab_count tabs"
				fi
			fi

			# logs info message if in verbose mode
			if [[ $name_fun ]]; then	
				echo -e "$BOLD$FG_GREEN >> Addding$NORMAL $name_fun to $BOLD$UNDERLINE$FG_WHITE$name_file$NORMAL"
			fi

			# adds prototype to the header
			echo "$function;" >> $name_file
		done

		# closes start ifndef
		echo "" >> $name_file
		echo "#endif" >> $name_file

		# displays norminette result if in verbose mode
		if [[ -v map_opts["verbose"] ]]; then
			norminette_output=$(norminette $file)
			echo -e "$BOLD$FG_MAGENTA[ Norminette ]$NORMAL"
			if [[ $norminette_output == *"OK"* ]]; then	
				echo -e " $BOLD$FG_GREEN■ $norminette_output$NORMAL"
			else
				echo -e " $BOLD$FG_RED■ $norminette_output$NORMAL"
			fi
		fi
	done
}

main "$@"
