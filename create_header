#!/bin/bash

source colors.sh

# processes the options passed to the script
options=$(getopt -o v -l verbose -- "$@")

# checks for errors when processing options
if [[ $? != 0 ]]; then
	echo "Error: failed to parse parameters"
	exit 1
fi

# sets positional argumenst to the values parsed by getopt
eval set -- $options

# retrieves arguments
args=("$@")

# map responsible for storing optional argument value
declare -A map_opts

# iterates over each argument to retrieve its value
for ((i=0; i < ${#args[@]}; i++)); do
	case "${args[i]}" in
		--verbose|-v)	# activates verbose output
			map_opts["verbose"]=1
			shift
			;;
	esac
done

# retrieves arguments to take shift into account
args=("$@")

# tries and retrieve user info from environtment variables
user="$USER"
group="$GROUP"
mail="$MAIL"

# retrieves user info if environtment variables were not set
if [[ ! $user ]]; then
	user=$(/usr/bin/whoami)
fi
if [[ ! $group ]]; then
	group=$(/usr/bin/id -gn $user)
fi
if [[ ! $mail ]]; then
	mail="$user@student.42.fr"
fi

# retrieves arguments
IFS=$'\n'

# banner, to be formatted to match 42 norm
# '_' marks where insertion will take place
banner=(
	"/* ************************************************************************** */" # 0
	"/*                                                                            */" # 1
	"/*                                                        :::      ::::::::   */" # 2
	"/*   _                                                  :+:      :+:    :+:   */" # 3
	"/*                                                    +:+ +:+         +:+     */" # 4
	"/*   By: _                                          +#+  +:+       +#+        */" # 5
	"/*                                                +#+#+#+#+#+   +#+           */" # 6
	"/*   Created: _                                        #+#    #+#             */" # 7
	"/*   Updated: _                                       ###   ########.fr       */" # 8
	"/*                                                                            */" # 9
	"/* ************************************************************************** */" # 10
)

# for every file passed to the script...
for file in ${args[@]}; do
	# ...if we have reached the end of the files, exits
	if [[ $file = "--" ]]; then
		continue
	fi

	# logs info message if in verbose mode
	if [[ -v map_opts["verbose"] ]]; then
		echo -e "$BOLD$FG_MAGENTA[ $file ]$NORMAL"
	fi

	# retrieves the parts of the banner to update
	line_file=${banner[3]}
	line_author=${banner[5]}
	line_date_created=${banner[7]}
	line_date_updated=${banner[8]}

	# variables used for replacement
	indent=5
	date=$(date +"%Y/%m/%d %T")
	userdate="$date by $user"

	# replaces file name
	line_start=${line_file:0:indent}
	line_end=${line_file:$(($indent + ${#file}))}
	line_file="$line_start$file$line_end"

	# logs info message if in verbose mode
	if [[ -v map_opts["verbose"] ]]; then
		echo -e "$FG_GREEN Successfully$NORMAL inserted$BOLD$FG_WHITE file name$NORMAL"
	fi

	# replaces file author
	line_start=${line_author:0:indent}
	line_end=${line_author:$(($indent + 7 + ${#user} + ${#mail}))}
	line_author="${line_start}By: $user <$mail>$line_end"

	# logs info message if in verbose mode
	if [[ -v map_opts["verbose"] ]]; then
		echo -e "$FG_GREEN Successfully$NORMAL inserted$BOLD$FG_WHITE file author$NORMAL"
	fi

	# replaces file creation date
	line_start=${line_date_created:0:indent}
	line_end=${line_date_created:$(($indent + 9 + ${#userdate}))}
	line_date_created="${line_start}Created: $userdate${line_end}"

	# logs info message if in verbose mode
	if [[ -v map_opts["verbose"] ]]; then
		echo -e "$FG_GREEN Successfully$NORMAL inserted$BOLD$FG_WHITE file creation date$NORMAL"
	fi

	# replace file update time
	line_start=${line_date_updated:0:indent}
	line_end=${line_date_updated:$(($indent + 9 + ${#userdate}))}
	line_date_updated="${line_start}Updated: $userdate${line_end}"

	# logs info message if in verbose mode
	if [[ -v map_opts["verbose"] ]]; then
		echo -e "$FG_GREEN Successfully$NORMAL inserted$BOLD$FG_WHITE file update date$NORMAL"
		echo -e "$BOLD$FG_GREEN >> Adding$NORMAL header to $BOLD$UNDERLINE$FG_WHITE$file$NORMAL"
	fi

	# adds the header to the file
	# NOTE: this will delete all file contents
	echo ${banner[0]}       > $file
	echo ${banner[1]}       >> $file
	echo ${banner[2]}       >> $file
	echo $line_file         >> $file
	echo ${banner[4]}       >> $file
	echo $line_author       >> $file
	echo ${banner[6]}       >> $file
	echo $line_date_created >> $file
	echo $line_date_updated >> $file
	echo ${banner[9]}       >> $file
	echo ${banner[10]}      >> $file
done
